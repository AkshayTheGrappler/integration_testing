name: Flutter CI

on:
  push:
    branches:
      - 'release*'


jobs:

  environment:
    runs-on: ubuntu-latest
    steps:

      # Setup Java environment in order to build the Android app.
      - uses: actions/checkout@v1
      - uses: actions/setup-java@v1
        with:
          java-version: '12.x'

      # Setup Java ndk environment in order to build the Android app.
      - uses: ravinderjangra/android-ndk-toolchain-setup@0.2
        with:
          api: '21'
          arch: 'x86'
          install-location: 'toolchains'
          force: true

      # Setup the flutter environment.
      - uses: subosito/flutter-action@v1
        with:
          #channel: 'stable' # 'dev', 'alpha', default to: 'stable'
          flutter-version: '2.2.1' # you can also specify exact version of flutter

      # Get flutter dependencies.
      - run: flutter pub get

  build_apk:
    # This job will run on ubuntu virtual machine
    runs-on: ubuntu-latest
    steps:

      # Setup Java environment in order to build the Android app.
      - uses: actions/checkout@v1
      - uses: actions/setup-java@v1
        with:
          java-version: '12.x'

      # Setup Java ndk environment in order to build the Android app.
      - uses: ravinderjangra/android-ndk-toolchain-setup@0.2
        with:
          api: '21'
          arch: 'x86'
          install-location: 'toolchains'
          force: true

      # Setup the flutter environment.
      - uses: subosito/flutter-action@v1
        with:
          #channel: 'stable' # 'dev', 'alpha', default to: 'stable'
          flutter-version: '2.2.1' # you can also specify exact version of flutter

      # Get flutter dependencies.
      - run: flutter pub get

#       Check for any formatting issues in the code.
#      - run: flutter format --set-exit-if-changed .
#
#       Statically analyze the Dart code for any errors.
#      - run: flutter analyze .
#
#       Run widget tests for our flutter project.
#      - run: flutter test

      # Build apk.
      - run: flutter build apk

      # Upload generated apk to the artifacts.
      - uses: actions/upload-artifact@v1
        with:
          name: release-apk
          path: build/app/outputs/apk/release/app-release.apk

  build_ipa:
     name: Build iOS app
     needs: [environment]
     runs-on: macos-latest
     steps:
       - name: Building IPA
         run: |
           xcode-project use-profiles
           flutter build ios --release --no-codesign
           xcode-project build-ipa --workspace ios/Runner.xcworkspace --scheme Runner --config Release
       - name: Upload ipa
         uses: actions/upload-artifact@v1
         with:
           name: ios-ipa
           path: build/ios/ipa/flutter_app.ipa

#  test:
#    name: Unit Tests
#    runs-on: ubuntu-18.04
#
#    steps:
#      - uses: actions/checkout@v1
#      - name: Set up JDK 1.8
#        uses: actions/setup-java@v1
#        with:
#          java-version: 1.8
#      - name: Run Unit tests
#        run: bash ./gradlew test --stacktrace

#  sonar:
#    name: SonarCloud Scan
#    runs-on: ubuntu-18.04
#
#    steps:
#      - uses: actions/checkout@v1
#      - name: SonarCloud Scan
#        run: bash ./gradlew jacocoUnitTestReport sonarqube -Dsonar.login=${{ secrets.SONAR_TOKEN }} --stacktrace
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#      - name: Link to SonarCloud Report
#        run: echo "https://sonarcloud.io/dashboard?id=wkrzywiec_WaWa-Tabor"

#  apk:
#    name: Generate APK
#    runs-on: ubuntu-18.04
#
#    steps:
#      - uses: actions/checkout@v1
#      - name: Set up JDK 1.8
#        uses: actions/setup-java@v1
#        with:
#          java-version: 1.8
#
#      - name: Assemble app debug APK
#        run: flutter build apk --debug
#      - name: Upload app APK
#        uses: actions/upload-artifact@v1
#        with:
#          name: app-debug
#          path: app/build/outputs/apk/debug/app-debug.apk

#      - name: Assemble Android Instrumentation Tests
#        run: bash ./gradlew assembleDebugAndroidTest
#      - name: Upload Android Test APK
#        uses: actions/upload-artifact@v1
#        with:
#          name: app-debug-androidTest
#          path: app/build/outputs/apk/androidTest/debug/app-debug-androidTest.apk
#
#
#  firebase:
#    name: Run UI tests with Firebase Test Lab
#    needs: apk
#    runs-on: ubuntu-18.04
#
#    steps:
#      - uses: actions/checkout@v1
#
#      - name: Download app APK
#        uses: actions/download-artifact@v1
#        with:
#          name: app-debug
#
#      - name: Download Android test APK
#        uses: actions/download-artifact@v1
#        with:
#          name: app-debug-androidTest
#
#      - name: Login to Google Cloud
#        uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
#        with:
#          version: '270.0.0'
#          service_account_key: ${{ secrets.GCLOUD_AUTH }}
#
#      - name: Set current project
#        run: gcloud config set project ${{ secrets.FIREBASE_PROJECT_ID }}
#
#      - name: Run Instrumentation Tests in Firebase Test Lab
#        run: gcloud firebase test android run --type instrumentation --app app-debug/app-debug.apk --test app-debug-androidTest/app-debug-androidTest.apk --device model=Pixel2,version=28,locale=pl,orientation=portrait
